from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards.history import get_history_keyboard, get_history_item_keyboard
from keyboards.main_menu import get_main_menu_keyboard
import datetime

router = Router()

def register_history_handlers(dp, db):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –∞—Ç—Ä–∏–±—É—Ç–µ —Ä–æ—É—Ç–µ—Ä–∞
    router.db = db
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ db –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    router.message.middleware(DbMiddleware(db))
    router.callback_query.middleware(DbMiddleware(db))
    
    dp.include_router(router)

class DbMiddleware:
    def __init__(self, db):
        self.db = db
    
    async def __call__(self, handler, event, data):
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        data["db"] = self.db
        return await handler(event, data)

@router.message(Command("history"))
async def cmd_history(message: Message, db):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = db.get_user_search_history(user_id)
    
    if not history:
        await message.answer(
            "üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º —à—Ä–∏—Ñ—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await message.answer(
        "üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_history_keyboard(history)
    )

@router.callback_query(F.data == "history")
async def show_history(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = db.get_user_search_history(user_id)
    
    if not history:
        await callback.message.edit_text(
            "üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º —à—Ä–∏—Ñ—Ç–æ–≤, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    await callback.message.edit_text(
        "üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_history_keyboard(history)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("history_item_"))
async def show_history_item(callback: CallbackQuery, db):
    search_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
    search_details = db.get_search_details(search_id)
    
    if not search_details:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    search_date = datetime.datetime.fromisoformat(search_details["search_date"])
    formatted_date = search_date.strftime("%d.%m.%Y %H:%M")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∏—Å–∫–µ
    message_text = (
        f"üîç –ü–æ–∏—Å–∫: <b>{search_details['query']}</b>\n"
        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(search_details['fonts'])}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–∞—Ö
    for i, font in enumerate(search_details['fonts'], 1):
        message_text += (
            f"{i}. <b>{font['font_name']}</b>\n"
            f"üë§ –î–∏–∑–∞–π–Ω–µ—Ä: {font['designer'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üîó <a href='{font['download_url']}'>–°–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç</a>\n\n"
        )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_history_item_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer() 