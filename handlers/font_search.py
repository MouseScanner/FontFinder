import logging
import os
import uuid
import aiohttp
import aiofiles

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.font_search import get_search_results_keyboard, get_font_info_keyboard
from services.font_api_client import FontApiClient
from utils.pagination import paginate_results
from keyboards.main_menu import get_main_menu_keyboard

router = Router()
font_api_client = FontApiClient()

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
FONTS_DIR = "fonts"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(FONTS_DIR, exist_ok=True)

class FontSearch(StatesGroup):
    waiting_for_query = State()


def register_font_search_handlers(dp, db):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –∞—Ç—Ä–∏–±—É—Ç–µ —Ä–æ—É—Ç–µ—Ä–∞
    router.db = db
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ db –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    router.message.middleware(DbMiddleware(db))
    router.callback_query.middleware(DbMiddleware(db))
    
    dp.include_router(router)


class DbMiddleware:
    def __init__(self, db):
        self.db = db
    
    async def __call__(self, handler, event, data):
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        data["db"] = self.db
        return await handler(event, data)


@router.callback_query(F.data == "search_font")
async def search_font_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ —à—Ä–∏—Ñ—Ç–æ–≤\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    await state.set_state(FontSearch.waiting_for_query)
    await callback.answer()


@router.message(FontSearch.waiting_for_query)
async def process_font_search(message: Message, state: FSMContext, db):
    query = message.text.strip()
    user_id = message.from_user.id

    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    await message.answer(f"üîç –ò—â—É —à—Ä–∏—Ñ—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}...")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    search_results = await font_api_client.search_fonts(query)

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
    search_id = db.add_search_query(user_id, query)

    if not search_results:
        await message.answer(
            "üòï –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for font in search_results:
        db.add_found_font(search_id, font)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await state.update_data(
        search_results=search_results,
        current_page=1,
        query=query,
        search_id=search_id
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    paginated_results = paginate_results(search_results, 1)

    await message.answer(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n"
        f"–ù–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(search_results)}",
        reply_markup=get_search_results_keyboard(paginated_results, 1, len(search_results))
    )


@router.callback_query(F.data.startswith("page_"))
async def process_page_navigation(callback: CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[1])

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    search_results = data.get("search_results", [])
    query = data.get("query", "")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    paginated_results = paginate_results(search_results, page)

    await callback.message.edit_text(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}\n"
        f"–ù–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(search_results)}",
        reply_markup=get_search_results_keyboard(paginated_results, page, len(search_results))
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await state.update_data(current_page=page)
    await callback.answer()


@router.callback_query(F.data.startswith("font_"))
async def show_font_info(callback: CallbackQuery, state: FSMContext):
    font_slug = callback.data.split("_")[1]

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    search_results = data.get("search_results", [])

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ
    font_info = None
    for font in search_results:
        if font["data"]["slug"] == font_slug:
            font_info = font
            break

    if not font_info:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ä–∏—Ñ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à—Ä–∏—Ñ—Ç–µ
    font_data = font_info["data"]
    font_name = font_data["font_name"]
    designer = font_data.get("designer", "–ù–µ —É–∫–∞–∑–∞–Ω")
    manufacturer = font_data.get("manufacturer", "–ù–µ —É–∫–∞–∑–∞–Ω")
    user_fullname = font_data.get("user_fullname", "")

    message_text = (
        f"üî§ <b>{font_name}</b>\n\n"
        f"üë§ –î–∏–∑–∞–π–Ω–µ—Ä: {designer}\n"
        f"üè¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {manufacturer}\n"
        f"‚ÑπÔ∏è {user_fullname}\n\n"
        f"üîó <a href='{font_data['url']}'>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —à—Ä–∏—Ñ—Ç–∞</a>"
    )

    await callback.message.edit_text(
        message_text,
        reply_markup=get_font_info_keyboard(font_slug, data.get("current_page", 1)),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("download_"))
async def download_font(callback: CallbackQuery, db):
    font_slug = callback.data.split("_")[1]
    download_url = f"https://font.download/dl/font/{font_slug}.zip"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    status_message = await callback.message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ {font_slug}...")
    
    try:
        logging.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {download_url}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"{uuid.uuid4()}_{font_slug}.zip"
        file_path = os.path.join(FONTS_DIR, filename)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        async with aiohttp.ClientSession() as session:
            async with session.get(download_url) as response:
                if response.status == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    async with aiofiles.open(file_path, 'wb') as f:
                        await f.write(await response.read())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–ª—Å—è
                    if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                        logging.info(f"–®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                        
                        # –ò—â–µ–º —à—Ä–∏—Ñ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
                        db.cursor.execute(
                            "SELECT id FROM local_fonts WHERE font_slug = ?",
                            (font_slug,)
                        )
                        result = db.cursor.fetchone()
                        
                        if result:
                            # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                            font_id = result[0]
                            db.cursor.execute(
                                "UPDATE local_fonts SET file_path = ? WHERE id = ?",
                                (file_path, font_id)
                            )
                            db.connection.commit()
                            
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–æ–∫
                            db.increment_font_download_count(font_id)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await callback.message.answer_document(
                            FSInputFile(file_path, filename=f"{font_slug}.zip"),
                            caption=f"–®—Ä–∏—Ñ—Ç: {font_slug}"
                        )
                        
                        await status_message.edit_text(f"‚úÖ –®—Ä–∏—Ñ—Ç {font_slug} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                    else:
                        logging.error(f"–§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: {file_path}")
                        await callback.message.answer(
                            f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç: <a href='{download_url}'>{font_slug}</a>",
                            parse_mode="HTML"
                        )
                        await status_message.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                else:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç. –°—Ç–∞—Ç—É—Å: {response.status}")
                    await callback.message.answer(
                        f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç: <a href='{download_url}'>{font_slug}</a>",
                        parse_mode="HTML"
                    )
                    await status_message.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        await callback.message.answer(
            f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç: <a href='{download_url}'>{font_slug}</a>",
            parse_mode="HTML"
        )
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
    
    await callback.answer()
