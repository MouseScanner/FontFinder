from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.admin import (
    get_admin_keyboard, get_users_keyboard, get_searches_keyboard, 
    get_user_info_keyboard, get_local_fonts_keyboard, get_font_info_keyboard
)
from keyboards.main_menu import get_main_menu_keyboard
from config import ADMIN_IDS
import datetime
import os
import logging
import aiohttp
import aiofiles
import uuid

router = Router()

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ä–∏—Ñ—Ç–æ–≤
FONTS_DIR = "fonts"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(FONTS_DIR, exist_ok=True)

class AdminAction(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_font_search = State()

def register_admin_handlers(dp, db):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –∞—Ç—Ä–∏–±—É—Ç–µ —Ä–æ—É—Ç–µ—Ä–∞
    router.db = db
    
    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ db –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    router.message.middleware(DbMiddleware(db))
    router.callback_query.middleware(DbMiddleware(db))
    
    dp.include_router(router)

class DbMiddleware:
    def __init__(self, db):
        self.db = db
    
    async def __call__(self, handler, event, data):
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        data["db"] = self.db
        return await handler(event, data)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin_filter(message):
    return message.from_user.id in ADMIN_IDS

@router.message(Command("admin"))
async def cmd_admin(message: Message, db):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.set_admin(user_id, True)
    
    await message.answer(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data == "admin")
async def show_admin_panel(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await callback.message.edit_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "admin_users")
async def show_users(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    
    await callback.message.edit_text(
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        reply_markup=get_users_keyboard(users)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_users_page_"))
async def navigate_users(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    
    await callback.message.edit_text(
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        reply_markup=get_users_keyboard(users, page)
    )
    await callback.answer()

@router.callback_query(F.data == "admin_searches")
async def show_searches(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    searches = db.get_all_searches()
    
    await callback.message.edit_text(
        "üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(searches)}",
        reply_markup=get_searches_keyboard(searches)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_searches_page_"))
async def navigate_searches(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    searches = db.get_all_searches()
    
    await callback.message.edit_text(
        "üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(searches)}",
        reply_markup=get_searches_keyboard(searches, page)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_user_"))
async def show_user_info(callback: CallbackQuery, db):
    admin_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in ADMIN_IDS and not db.is_admin(admin_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    users = db.get_all_users()
    user_info = None
    
    for user in users:
        if user["user_id"] == user_id:
            user_info = user
            break
    
    if not user_info:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_date = datetime.datetime.fromisoformat(user_info["registration_date"])
    formatted_date = reg_date.strftime("%d.%m.%Y %H:%M")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    admin_status = "–î–∞" if user_info["is_admin"] else "–ù–µ—Ç"
    
    message_text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        f"ID: {user_info['user_id']}\n"
        f"–ò–º—è: {user_info['full_name']}\n"
        f"Username: @{user_info['username']}\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin_status}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {formatted_date}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤: {user_info['search_count']}"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_user_info_keyboard(user_id),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_search_"))
async def show_search_info(callback: CallbackQuery, state: FSMContext, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    if callback.data == "admin_search_local_fonts":
        await search_local_fonts_prompt(callback, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–∏—Å–∫–∞
    search_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ
    search_details = db.get_search_details(search_id)
    
    if not search_details:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    search_date = datetime.datetime.fromisoformat(search_details["search_date"])
    formatted_date = search_date.strftime("%d.%m.%Y %H:%M")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∏—Å–∫–µ
    message_text = (
        f"üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∏—Å–∫–µ</b>\n\n"
        f"ID: {search_details['id']}\n"
        f"–ó–∞–ø—Ä–æ—Å: {search_details['query']}\n"
        f"–î–∞—Ç–∞: {formatted_date}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {search_details['user']['full_name']} (@{search_details['user']['username']})\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(search_details['fonts'])}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–∞—Ö
    for i, font in enumerate(search_details['fonts'], 1):
        message_text += (
            f"{i}. <b>{font['font_name']}</b>\n"
            f"üë§ –î–∏–∑–∞–π–Ω–µ—Ä: {font['designer'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üîó <a href='{font['download_url']}'>–°–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç</a>\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫–∞–º", callback_data="admin_searches")
        ],
        [
            InlineKeyboardButton(text="üëë –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_user_history_"))
async def show_user_history(callback: CallbackQuery, db):
    admin_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in ADMIN_IDS and not db.is_admin(admin_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = db.get_user_search_history(user_id)
    
    if not history:
        await callback.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –ø–æ–∏—Å–∫–∞
    message_text = f"üìÇ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
    
    for i, item in enumerate(history, 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        search_date = datetime.datetime.fromisoformat(item["search_date"])
        formatted_date = search_date.strftime("%d.%m.%Y %H:%M")
        
        message_text += (
            f"{i}. <b>{item['query']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"–ù–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(item['fonts'])}\n\n"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton(text=f"‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data=f"admin_user_{user_id}")
        ],
        [
            InlineKeyboardButton(text="üëë –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_make_admin_"))
async def make_admin(callback: CallbackQuery, db):
    admin_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in ADMIN_IDS and not db.is_admin(admin_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = int(callback.data.split("_")[3])
    
    # –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    db.set_admin(user_id, True)
    
    await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await show_user_info(callback, db)

@router.callback_query(F.data == "admin_stats")
async def show_statistics(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_count = db.get_user_count()
    admin_count = db.get_admin_count()
    search_count = db.get_search_count()
    font_count = db.get_font_count()
    doc_count = db.get_document_count()
    font_stats = db.get_font_stats()
    total_downloads = font_stats.get("total_downloads", 0) if font_stats else 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
    local_search_stats = db.get_local_search_stats()
    local_search_count = local_search_stats.get("total_searches", 0) if local_search_stats else 0
    unique_users = local_search_stats.get("unique_users", 0) if local_search_stats else 0
    unique_queries = local_search_stats.get("unique_queries", 0) if local_search_stats else 0
    avg_results = local_search_stats.get("avg_results", 0) if local_search_stats else 0
    top_queries = local_search_stats.get("top_queries", []) if local_search_stats else []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n"
        f"üîç –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {search_count}\n"
        f"üî§ –®—Ä–∏—Ñ—Ç–æ–≤ –≤ –±–∞–∑–µ: {font_count}\n"
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}\n"
        f"‚¨áÔ∏è –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: {total_downloads}\n\n"
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤:</b>\n"
        f"üîç –í—Å–µ–≥–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {local_search_count}\n"
        f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
        f"‚ùì –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {unique_queries}\n"
        f"üìä –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {avg_results:.1f}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if top_queries:
        stats_message += "\n<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:</b>\n"
        for i, (query, count) in enumerate(top_queries[:5], 1):
            stats_message += f"{i}. {query} - {count} —Ä–∞–∑\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await callback.message.edit_text(stats_message, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "admin_local_fonts")
async def show_local_fonts(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    fonts = db.get_local_fonts()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üóÉÔ∏è <b>–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤</b>\n\n–í—Å–µ–≥–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(fonts)}"
    
    # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not fonts:
        message_text += "\n\n–ë–∞–∑–∞ –ø—É—Å—Ç–∞. –®—Ä–∏—Ñ—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_local_fonts_keyboard(fonts)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_local_fonts_page_"))
async def navigate_local_fonts(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    fonts = db.get_local_fonts()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = f"üóÉÔ∏è <b>–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤</b>\n\n–í—Å–µ–≥–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(fonts)}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_local_fonts_keyboard(fonts, page=page)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_font_"))
async def show_font_info(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —à—Ä–∏—Ñ—Ç–∞
    font_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ
    fonts = db.get_local_fonts()
    font = next((f for f in fonts if f["id"] == font_id), None)
    
    if not font:
        await callback.answer("–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    added_date = datetime.datetime.fromisoformat(font["added_date"])
    formatted_date = added_date.strftime("%d.%m.%Y %H:%M")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    file_exists = font["file_path"] and os.path.exists(font["file_path"])
    file_size = "–ù–µ—Ç —Ñ–∞–π–ª–∞"
    if file_exists:
        size_bytes = os.path.getsize(font["file_path"])
        if size_bytes < 1024:
            file_size = f"{size_bytes} –±–∞–π—Ç"
        elif size_bytes < 1024 * 1024:
            file_size = f"{size_bytes / 1024:.1f} –ö–ë"
        else:
            file_size = f"{size_bytes / (1024 * 1024):.1f} –ú–ë"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —à—Ä–∏—Ñ—Ç–µ
    message_text = (
        f"üî§ <b>{font['font_name']}</b>\n\n"
        f"üÜî ID: {font['id']}\n"
        f"üîç Slug: {font['font_slug']}\n"
        f"üë®‚Äçüé® –î–∏–∑–∞–π–Ω–µ—Ä: {font['designer'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {font['manufacturer'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {font['user_fullname'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {formatted_date}\n"
        f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∑–æ–∫: {font['download_count']}\n"
        f"üìÑ –¢–∏–ø: {'–î–æ–∫—É–º–µ–Ω—Ç' if font['is_document'] else '–ù–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ'}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –¥–æ–±–∞–≤–∏–≤—à–µ–º —à—Ä–∏—Ñ—Ç
    if font["added_by"]:
        message_text += f"üë§ –î–æ–±–∞–≤–∏–ª: {font['added_by']['full_name']} (@{font['added_by']['username']})\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    if file_exists:
        message_text += f"üìÇ –§–∞–π–ª: {os.path.basename(font['file_path'])}\n"
        message_text += f"üìä –†–∞–∑–º–µ—Ä: {file_size}\n"
        message_text += f"‚úÖ –°—Ç–∞—Ç—É—Å: –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω\n"
    else:
        if font["file_path"]:
            message_text += f"üìÇ –§–∞–π–ª: {os.path.basename(font['file_path'])}\n"
            message_text += f"‚ùå –°—Ç–∞—Ç—É—Å: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
        else:
            message_text += f"‚ùå –°—Ç–∞—Ç—É—Å: –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_font_info_keyboard(font_id)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_download_font_"))
async def download_font(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —à—Ä–∏—Ñ—Ç–∞
    font_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ
    fonts = db.get_local_fonts()
    font = next((f for f in fonts if f["id"] == font_id), None)
    
    if not font:
        await callback.answer("–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–æ–∫
    db.increment_font_download_count(font_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    status_message = await callback.message.answer(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ {font['font_name']}...")
    
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if font["is_document"] and font["file_path"] and os.path.exists(font["file_path"]):
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —à—Ä–∏—Ñ—Ç–∞: {font['file_path']}")
            
            try:
                await callback.message.answer_document(
                    FSInputFile(font["file_path"], filename=os.path.basename(font["file_path"])),
                    caption=f"–®—Ä–∏—Ñ—Ç: {font['font_name']}"
                )
                await status_message.edit_text(f"‚úÖ –®—Ä–∏—Ñ—Ç {font['font_name']} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        else:
            # –°–∫–∞—á–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –ø–æ —Å—Å—ã–ª–∫–µ
            download_url = font["download_url"]
            logging.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ: {download_url}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"{uuid.uuid4()}_{font['font_slug']}.zip"
            file_path = os.path.join(FONTS_DIR, filename)
            
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                async with aiohttp.ClientSession() as session:
                    async with session.get(download_url) as response:
                        if response.status == 200:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                            async with aiofiles.open(file_path, 'wb') as f:
                                await f.write(await response.read())
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                            db.cursor.execute(
                                "UPDATE local_fonts SET file_path = ? WHERE id = ?",
                                (file_path, font_id)
                            )
                            db.connection.commit()
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            await callback.message.answer_document(
                                FSInputFile(file_path, filename=f"{font['font_name']}.zip"),
                                caption=f"–®—Ä–∏—Ñ—Ç: {font['font_name']}"
                            )
                            
                            await status_message.edit_text(f"‚úÖ –®—Ä–∏—Ñ—Ç {font['font_name']} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                            logging.info(f"–®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                            await callback.message.answer(
                                f"‚¨áÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ {font['font_name']}:\n{download_url}",
                                disable_web_page_preview=True
                            )
                            await status_message.edit_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç. –°—Ç–∞—Ç—É—Å: {response.status}")
            except Exception as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                await callback.message.answer(
                    f"‚¨áÔ∏è –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —à—Ä–∏—Ñ—Ç–∞ {font['font_name']}:\n{download_url}",
                    disable_web_page_preview=True
                )
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {str(e)}")
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
    except Exception as e:
        logging.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin_delete_font_"))
async def delete_font(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —à—Ä–∏—Ñ—Ç–∞
    font_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ
    fonts = db.get_local_fonts()
    font = next((f for f in fonts if f["id"] == font_id), None)
    
    if not font:
        await callback.answer("–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –£–¥–∞–ª—è–µ–º —à—Ä–∏—Ñ—Ç –∏–∑ –±–∞–∑—ã
    success = db.delete_local_font(font_id)
    
    if success:
        await callback.answer("–®—Ä–∏—Ñ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —à—Ä–∏—Ñ—Ç–æ–≤
        await show_local_fonts(callback, db)
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à—Ä–∏—Ñ—Ç.")

@router.callback_query(F.data == "admin_search_local_fonts")
async def search_local_fonts_prompt(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ —Ä–æ—É—Ç–µ—Ä–∞
    db = router.db
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    await state.set_state(AdminAction.waiting_for_font_search)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    await callback.message.answer(
        "üîé –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ —à—Ä–∏—Ñ—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_local_fonts")]
        ])
    )
    await callback.answer()

@router.message(AdminAction.waiting_for_font_search)
async def search_local_fonts(message: Message, state: FSMContext, db):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = message.text.strip()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    status_message = await message.answer(f"üîé –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}...")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        fonts = db.search_local_fonts(query)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if fonts:
            message_text = (
                f"üîé <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> {query}\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: {len(fonts)}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            for i, font in enumerate(fonts[:3], 1):
                message_text += (
                    f"{i}. <b>{font['font_name']}</b>\n"
                    f"üë§ –î–∏–∑–∞–π–Ω–µ—Ä: {font.get('designer', '') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üè¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {font.get('manufacturer', '') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                )
        else:
            message_text = f"üîé <b>–ü–æ –∑–∞–ø—Ä–æ—Å—É {query} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_local_fonts_keyboard(fonts) if fonts else InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —à—Ä–∏—Ñ—Ç–∞–º", callback_data="admin_local_fonts")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await status_message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —à—Ä–∏—Ñ—Ç–æ–≤: {e}")
        await status_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —à—Ä–∏—Ñ—Ç–∞–º", callback_data="admin_local_fonts")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

@router.callback_query(F.data.startswith("admin_refresh_font_"))
async def refresh_font_info(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —à—Ä–∏—Ñ—Ç–∞
    font_id = int(callback.data.split("_")[-1])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await callback.answer("–û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ...")
    
    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ
    await show_font_info(callback, db)

@router.callback_query(F.data.startswith("admin_font_stats_"))
async def show_font_stats(callback: CallbackQuery, db):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS and not db.is_admin(user_id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —à—Ä–∏—Ñ—Ç–∞
    font_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à—Ä–∏—Ñ—Ç–µ
    fonts = db.get_local_fonts()
    font = next((f for f in fonts if f["id"] == font_id), None)
    
    if not font:
        await callback.answer("–®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —à—Ä–∏—Ñ—Ç –±—ã–ª —Å–∫–∞—á–∞–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —É –Ω–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    added_date = datetime.datetime.fromisoformat(font["added_date"])
    formatted_date = added_date.strftime("%d.%m.%Y %H:%M")
    
    # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    days_since_added = (datetime.datetime.now() - added_date).days
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å
    downloads_per_day = font["download_count"] / max(days_since_added, 1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à—Ä–∏—Ñ—Ç–∞ {font['font_name']}</b>\n\n"
        f"üÜî ID: {font['id']}\n"
        f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {formatted_date} ({days_since_added} –¥–Ω–µ–π –Ω–∞–∑–∞–¥)\n"
        f"‚¨áÔ∏è –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: {font['download_count']}\n"
        f"üìà –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –¥–µ–Ω—å: {downloads_per_day:.2f}\n"
        f"üìÑ –¢–∏–ø: {'–î–æ–∫—É–º–µ–Ω—Ç' if font['is_document'] else '–ù–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ'}\n"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ä–∏—Ñ—Ç–µ", callback_data=f"admin_font_{font_id}")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —à—Ä–∏—Ñ—Ç–∞–º", callback_data="admin_local_fonts")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    await callback.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )
    await callback.answer() 