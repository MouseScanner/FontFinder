from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import datetime

def get_admin_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="admin_searches")
        ],
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ],
        [
            InlineKeyboardButton(text="üóÉÔ∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ —à—Ä–∏—Ñ—Ç–æ–≤", callback_data="admin_local_fonts")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_users_keyboard(users, page=1, items_per_page=5):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    keyboard = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (len(users) + items_per_page - 1) // items_per_page
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(users))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for user in users[start_idx:end_idx]:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        reg_date = datetime.datetime.fromisoformat(user["registration_date"])
        formatted_date = reg_date.strftime("%d.%m.%Y")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        admin_mark = "üëë " if user["is_admin"] else ""
        button_text = f"{admin_mark}{user['full_name']} (@{user['username']}) - {formatted_date}"
        
        keyboard.append([
            InlineKeyboardButton(text=button_text, callback_data=f"admin_user_{user['user_id']}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation = []
    
    if page > 1:
        navigation.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_users_page_{page - 1}")
        )
    
    navigation.append(
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="admin_users_page_info")
    )
    
    if page < total_pages:
        navigation.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_users_page_{page + 1}")
        )
    
    if navigation:
        keyboard.append(navigation)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin")
    ])
    
    keyboard.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_searches_keyboard(searches, page=1, items_per_page=5):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    keyboard = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (len(searches) + items_per_page - 1) // items_per_page
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(searches))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for search in searches[start_idx:end_idx]:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –ø–æ–∏—Å–∫–∞
        search_date = datetime.datetime.fromisoformat(search["search_date"])
        formatted_date = search_date.strftime("%d.%m.%Y %H:%M")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"üîç {search['query']} - {formatted_date} ({search['font_count']} —à—Ä–∏—Ñ—Ç–æ–≤)"
        
        keyboard.append([
            InlineKeyboardButton(text=button_text, callback_data=f"admin_search_{search['id']}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation = []
    
    if page > 1:
        navigation.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_searches_page_{page - 1}")
        )
    
    navigation.append(
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="admin_searches_page_info")
    )
    
    if page < total_pages:
        navigation.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_searches_page_{page + 1}")
        )
    
    if navigation:
        keyboard.append(navigation)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin")
    ])
    
    keyboard.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_user_info_keyboard(user_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    keyboard = [
        [
            InlineKeyboardButton(text="üìÇ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", callback_data=f"admin_user_history_{user_id}")
        ],
        [
            InlineKeyboardButton(text="üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º", callback_data=f"admin_make_admin_{user_id}")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_local_fonts_keyboard(fonts, page=1, items_per_page=10):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤ (2 –≤ —Ä—è–¥)
    """
    keyboard = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    total_pages = (len(fonts) + items_per_page - 1) // items_per_page
    start_idx = (page - 1) * items_per_page
    end_idx = min(start_idx + items_per_page, len(fonts))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (2 –≤ —Ä—è–¥)
    current_row = []
    for i, font in enumerate(fonts[start_idx:end_idx], start=start_idx + 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        added_date = datetime.datetime.fromisoformat(font["added_date"])
        formatted_date = added_date.strftime("%d.%m.%Y")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º
        doc_mark = "üìÑ" if font["is_document"] else "üî§"
        button_text = f"{i}. {doc_mark} {font['font_name']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç–µ–∫—É—â–∏–π —Ä—è–¥
        current_row.append(
            InlineKeyboardButton(text=button_text, callback_data=f"admin_font_{font['id']}")
        )
        
        # –ï—Å–ª–∏ –≤ —Ä—è–¥—É —É–∂–µ 2 –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à—Ä–∏—Ñ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if len(current_row) == 2 or i == end_idx:
            keyboard.append(current_row)
            current_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    navigation = []
    
    if page > 1:
        navigation.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_local_fonts_page_{page - 1}")
        )
    
    navigation.append(
        InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="admin_local_fonts_page_info")
    )
    
    if page < total_pages:
        navigation.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"admin_local_fonts_page_{page + 1}")
        )
    
    if navigation:
        keyboard.append(navigation)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
    keyboard.append([
        InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ", callback_data="admin_search_local_fonts")
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([
        InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin")
    ])
    
    keyboard.append([
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_font_info_keyboard(font_id):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ä–∏—Ñ—Ç–µ
    """
    keyboard = [
        [
            InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —à—Ä–∏—Ñ—Ç", callback_data=f"admin_download_font_{font_id}")
        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"admin_refresh_font_{font_id}"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"admin_font_stats_{font_id}")
        ],
        [
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã", callback_data=f"admin_delete_font_{font_id}")
        ],
        [
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —à—Ä–∏—Ñ—Ç–∞–º", callback_data="admin_local_fonts")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard) 